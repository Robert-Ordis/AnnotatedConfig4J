[わかってるけど優先度低いこと]
・サブセットの読み込み方の最適化
　→今はサブセットを検出したらそのつどファイルを読み直している。
　
[分かってるけど今のところ予定のないこと]
・Map<String, Object>系統の対応
・Map<String, AnnotatedConfig>の対応
　→要するに、下みたいなイメージ（"Map<String, SubsetCnfg> subsetMap;"がメンバーになる。）
rootCnfg.subsetMap.keyOfMap1.param1 = value
rootCnfg.subsetMap.keyOfMap1.param2 = value
rootCnfg.subsetMap.keyOfMap2.param1 = value
rootCnfg.subsetMap.keyOfMap2.param2 = value
　→アノテーションとしての指定方法がいまいちはっきりしていない。
　→値の入れ方をどうしよう。

[今後やってみたいこと]
・コンフィグのファイルへの書き出し
　→プリミティブ型はそのまま文字へ書き出せるのでおｋ
　→参照型（クラス）はtoStringか別の何かを整備してください。
　→・・・といったことを、AcSerializerの形で定義してみる。
　→コメントの出力は保存方法を思いついていないのでごめんね。せめて@Desciption("デフォルトコメント")でも書いて足しにできればいいんだけど。
　→@ConfigFunc定義のパラメータをどうするかが今のところ不明。
　　- 入れた結果どうするかは完全にユーザー定義な上、下手すると正規表現でパラメータ名まで不定である。
　　　　よって、この辺は統一的に「その他エクスポートメソッド」とかつけるのが無難な気がする。継承方式ならこの辺は自由…。
　　　　：ただし、フォーマット対応可変を夢見るので関数内で「出力パラメータ名, 値の記述, コメント」って形でコールバック叩くイメージ。
　　　　：出力中にエラー吐いたらログと出力ファイルにそれっぽいこと書くぐらいはしていいと思う。
　→ファイルのリーダーは外出ししたので、同じくライターも外出しすることになると思う。
　　
[とりあえずやったこと]
・コンフィグの読み込み
　→パラメータ名などの基本情報をクラス内に、アノテーションとして記述
　　- パラメータについてはコンフィグの名称変更に対する後方互換とかあるだろうから複数設定可能（雑）
　→コンフィグをやるにあたっての注意事項を規制という形でプログラム的に設定
　　- ひとまず簡単に値の上限下限を定義。んで、違反した場合に例外を出せるようにも。
　→読み込みフォーマット対応の拡張性向上の土台を作ってみたかった。（のでリーダー外出し）
　　- プリセットとして「最低限のiniファイル」と「propertiesファイル」の２つを用意。jsonとかは各自何とかしておくれ…。
　→セクションとして「読み込むパート」を明確に指定できるようにしてみた
　　- ・・・んだけど、propertiesのピリオドとiniのセクションを今ごっちゃにしてるんでどうしようかなこれ。
　　　　分けるべきなのかなこれ…。でもひとまず想定してたのはpropertiesとiniぐらいだったからな…。



