[やらなくちゃいけないこと]
・セクションとサブセットを区別して扱うこと
　→とりあえず、もうその辺優先してやっちゃえ
　→セクションで区切ってきたiniファイルで、ピリオド区切り構造やってきたらどうするって話。

・セクションはコンフィグの構造に影響を与えない→1個のファイルにデフォルトを作りつつ（または作らずに）複数のコンフィグを記述するためのものがセクション、としよう。
・「全セクションを読み込め」とか言われたら、Map<String, **Config>が返ってくる。
・いい加減、Parserの部分は作り直しでしょうね。モジュールチックに作れたとは自負しているので、
読み込んだ行をどう扱うかっていう部分だけ考えればよさそうですが。


・Map<String, AnnotatedConfig>の対応
　→要するに、下みたいなイメージ（"Map<String, SubsetCnfg> subsetMap;"がメンバーになる。）
rootCnfg.subsetMap.keyOfMap1.param1 = value
rootCnfg.subsetMap.keyOfMap1.param2 = value
rootCnfg.subsetMap.keyOfMap2.param1 = value
rootCnfg.subsetMap.keyOfMap2.param2 = value
={"rootCnfg": {"subsetMap": {"keyOfMap1": {"param1": value, "param2": value}, "keyOfMap2": {"param1": value, "param2": value}}}}
　→値の入れ方をどうしよう。↓みたいな感じかな？んで、用途の問題で型は明確なものにしないといけない。
@ConfigSubsetMap
Map<String, **Config(extends AnnotatedConfig)> subsetMap;

//xmlもyamlもサポートすんならこれ必須。
@ConfigSubsetList
List<**Config(extends AtsignConfig)> subsetList;

Parser parser = new Parser()
	.setSrc(src)				//path of source config file
	.useFirstSectionAsDefault(true)	//Use the first appeared section's value for the default of other section.
	.setReader(Preset.WINDOWS_INI)	//set reader. Must be set.
	.pushParent(parent_set(str));	//read only from specified value's subset. Array is also allowed.

Config c = parser.getConfig(clazz);				//get the first appeared section config
Config c = parser.getConfig(clazz, section);	//get the specified section config

Map<String, Config> map = parser.getAllConfig(clazz);	//get all appeared config. sectonName->config

・readConfigの戻り値は「次のセクション」？。んで、listenerにインターフェース追加: onSubset。
もしくはセクションについてもonSectionってやっちまうか。
そうすると、readConfigからsectionの項目が消えることになるる。
いろいろとつながりとか持たせたいので、
ConfigLineListener
　→"has root set, default named as space or null"
　→onValue(lineNum, name, value, comment)	//invoke mapped setter. (Must invoke in each logical line)
　→pushSubset(lineNum, name, comment)		//make subset in specified name. (Invoke if subset is detected)
　　→in one lined config, explode and push one by one.
　　→for Array, name will be ignored and append as new element. "xxx.1.value1" on properties must be defined as Map<String, XXX>
　→popSubset(lineNum)						//pop to upper set (Invoke if subset has been end. e.g. xml, json, yaml)
　→clearSubset()								//switch to first specified root set (Invoke if subset line has been end. e.g. properties)
　→switchSection(lineNum, name, comment)

//split with own rule.
String[] ConfigReader::splitValue(String value) {
	//do something else. if not support, 
}

cloneメソッドは手間かかリンゴ。
なので、リフレクションのあれやこれやを使って何とか頑張ってみましょうか？
→サブセットのやつとかなかなか手間だよなあ。Clonerクラスでも作ってやってみるかなあ。
→それこそ、前の実相でやったみたいな「実態のあるサブセットを確保しておいて次に繰り返す」をこっちでできる。

//ConfigHolderはまたおいおい考えるとしましょう。
//Parserを生成するためのファクトリーをユーザーで用意してもらって、
//AtConfigHolder.register(key, clazz, parser [, section])って形にするかな。
//confの中にparserが入ってて、っていう形？

AnnotatedConfigHolder
AtSignConfig
parser.specifySection("section1").specifySection("section2")
	.getConfig(src, Class<T> clazz, ConfigReader reader);
	
//AnnotatedConfigからReaderは外すかな？


[わかってるけど優先度低いこと]
・サブセットの読み込み方の最適化
　→今はサブセットを検出したらそのつどファイルを読み直している。
　
[分かってるけど今のところ予定のないこと]
・Map<String, Object>系統の対応
　→それに頼らなくちゃいけない時点でもうちょっとコンフィグ考えましょう。

[今後やってみたいこと]
・コンフィグのファイルへの書き出し
　→プリミティブ型はそのまま文字へ書き出せるのでおｋ
　→参照型（クラス）はtoStringか別の何かを整備してください。
　→・・・といったことを、AcSerializerの形で定義してみる。
　→コメントの出力は保存方法を思いついていないのでごめんね。せめて@Desciption("デフォルトコメント")でも書いて足しにできればいいんだけど。
　→@ConfigFunc定義のパラメータをどうするかが今のところ不明。
　　- 入れた結果どうするかは完全にユーザー定義な上、下手すると正規表現でパラメータ名まで不定である。
　　　　よって、この辺は統一的に「その他エクスポートメソッド」とかつけるのが無難な気がする。継承方式ならこの辺は自由…。
　　　　：ただし、フォーマット対応可変を夢見るので関数内で「出力パラメータ名, 値の記述, コメント」って形でコールバック叩くイメージ。
　　　　：出力中にエラー吐いたらログと出力ファイルにそれっぽいこと書くぐらいはしていいと思う。
　→ファイルのリーダーは外出ししたので、同じくライターも外出しすることになると思う。
　→セクションの扱いを変えたため、「1ファイルに様々なセクションのブツが持ってこられる」という感じになる。
　　そう考えると、configWriter（仮）は、様々なコンフィグファイルが一挙して押し寄せてくるイメージにでもなるか？
　　まさかの、ConfigHolderに依頼を出して書き出す形か？

[とりあえずやったこと]
・コンフィグの読み込み
　→パラメータ名などの基本情報をクラス内に、アノテーションとして記述
　　- パラメータについてはコンフィグの名称変更に対する後方互換とかあるだろうから複数設定可能（雑）
　→コンフィグをやるにあたっての注意事項を規制という形でプログラム的に設定
　　- ひとまず簡単に値の上限下限を定義。んで、違反した場合に例外を出せるようにも。
　→読み込みフォーマット対応の拡張性向上の土台を作ってみたかった。（のでリーダー外出し）
　　- プリセットとして「最低限のiniファイル」と「propertiesファイル」の２つを用意。jsonとかは各自何とかしておくれ…。
　→セクションとして「読み込むパート」を明確に指定できるようにしてみた
　　- ・・・んだけど、propertiesのピリオドとiniのセクションを今ごっちゃにしてるんでどうしようかなこれ。
　　　　分けるべきなのかなこれ…。でもひとまず想定してたのはpropertiesとiniぐらいだったからな…。
　　　　-> 分けることにしました。引数増えるのは…、もうこの際しょうがないしょうがない。


